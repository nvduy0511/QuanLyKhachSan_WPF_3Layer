//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;

    public partial class Phong : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Phong()
        {
            this.CT_PhieuThue = new HashSet<CT_PhieuThue>();
            this.CT_TienNghi = new HashSet<CT_TienNghi>();
        }
    
        public string SoPhong { get; set; }
        private string tinhTrang;
        private int? maLoaiPhong;
        public string TinhTrang
        {
            get => tinhTrang;
            set
            {
                tinhTrang = value;
                OnPropertyChanged("TinhTrang");
            }
        }
        public Nullable<int> MaLoaiPhong 
        {
            get => maLoaiPhong;
            set
            {
                maLoaiPhong = value;
                OnPropertyChanged("MaLoaiPhong");
            }
        }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CT_PhieuThue> CT_PhieuThue { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CT_TienNghi> CT_TienNghi { get; set; }
        public virtual LoaiPhong LoaiPhong { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string newName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(newName));
            }
        }
    }
}
