//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;

    public partial class LoaiPhong : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public LoaiPhong()
        {
            this.Phongs = new HashSet<Phong>();
        }

        private string tenLoaiPhong;
        private int soNguoi;
        private decimal giaNgay;
        private decimal giaGio;
        public int MaLoaiPhong { get; set; }
        public string TenLoaiPhong 
        {
            get => tenLoaiPhong;
            set
            {
                tenLoaiPhong = value;
                OnPropertyChanged("TenLoaiPhong");
            }
        }
        public int SoNguoiToiDa 
        {
            get => soNguoi;
            set
            {
                soNguoi = value;
                OnPropertyChanged("SoNguoiToiDa");
            }
        }
        public decimal GiaNgay 
        {
            get => giaNgay;
            set
            {
                giaNgay = value;
                OnPropertyChanged("GiaNgay");
            }
        }
        public decimal GiaGio 
        {
            get => giaGio;
            set
            {
                giaGio = value;
                OnPropertyChanged("GiaGio");
            }
        }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Phong> Phongs { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string newName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(newName));
            }
        }
    }
}
